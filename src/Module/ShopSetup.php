<?php declare(strict_types=1);
/**
 * Copyright Â© OXID eSales AG. All rights reserved.
 * See LICENSE file for license details.
 */

namespace OxidEsales\Codeception\Module;

use Codeception\Lib\ModuleContainer;
use Codeception\Module;
use Codeception\TestInterface;
use OxidEsales\EshopCommunity\Internal\Transition\Utility\ContextInterface;
use OxidEsales\EshopCommunity\Tests\TestUtils\Database\FixtureLoader;
use OxidEsales\EshopCommunity\Tests\TestUtils\Database\TestConnectionFactory;
use OxidEsales\EshopCommunity\Tests\TestUtils\Traits\ContainerTrait;
use Webmozart\PathUtil\Path;

class ShopSetup extends Module
{
    use ContainerTrait;

    public function __construct(ModuleContainer $moduleContainer, $config = null)
    {
        parent::__construct($moduleContainer, $config);
    }

    public function _beforeSuite($settings = [])
    {
        parent::_beforeSuite($settings);
        TestConnectionFactory::initAcceptance();
        FixtureLoader::getInstance()->loadFixtures(
            [Path::join(OX_TESTS_PATH, 'Codeception', '_data', 'db_fixture.yml')]);
        $this->setupCodeceptionContainer();
    }

    public function _before(TestInterface $test)
    {
        parent::_before($test);
        /** @var ContextInterface $context */
        $context = $this->get(ContextInterface::class);
        $varDir = dirname($context->getConfigurationDirectoryPath());
        if (file_exists($varDir))
        {
            rename($varDir, $varDir . '.bak');
        }
    }

    public function _after(TestInterface $test)
    {
        /** @var ContextInterface $context */
        $context = $this->get(ContextInterface::class);
        $varDir = dirname($context->getConfigurationDirectoryPath());
        if (file_exists($varDir . '.bak'))
        {
            rename($varDir . '.bak', $varDir);
        }
        parent::_after($test); // TODO: Change the autogenerated stub
    }

    public function _afterSuite()
    {
        TestConnectionFactory::cleanupAcceptance();
    }
}